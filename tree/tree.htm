
<html>
<head>
<link rel="stylesheet" href="../code/codemirror-5.0.css" />
<style>
.CodeMirror { border: 1px solid gray; cursor: text; height: 550px; }
/* canvas:focus { outline: none; } */
</style>
</head>
<body>

<script src="../jquery-1.10.2.min.js"></script>
<script src="../code/codemirror-5.0.js"></script>
<script src="../code/codemirror-5.0-javascript.js"></script>

<script src="sweetgum.js"></script>

<button onclick="RunCode()">Run Code</button>
<button onclick="Upload()">Upload</button>
<button onclick="Download()">Download</button>

<div id="codemirror" tabIndex="1" style="margin: 1em; display: none;"></div>
<div id="treeContainer"><canvas id="tree" width="1000" height="500" tabIndex="1" style="margin: 1em; border: 1px solid gray;"></canvas></div>

<script>

function Upload() {
	
	var fileChooser = document.createElement('input');
	fileChooser.type = 'file';
	
	fileChooser.onchange = function() {
		var fileReader = new FileReader();
		fileReader.onload = function() {
			var text = this.result;
			data = JSON.parse(text);
			tree = new Sweetgum.Tree(ctx, data, options);
		};
		fileReader.readAsText(fileChooser.files[0]);
	};
	
	fileChooser.click();
}
function Download() {
	
	var blob = new Blob([JSON.stringify(tree.data)],{type:'text/json'});
	var fileReader = new FileReader();
	
	fileReader.onload = function(event) {
		var a = document.createElement('a');
		a.href = event.target.result;
		a.download = 'filename';
		document.body.appendChild(a);
		a.click();
		document.body.removeChild(a);
	};
	
	fileReader.readAsDataURL(blob);
}

function RunCode() { (new Function('', codemirror.getValue()))(); }
function InitCodemirror(div, code) {
	
	var textarea = document.createElement('textarea');
	div.appendChild(textarea);
	
	var options = {
		//smartIndent: true,
		lineNumbers: true,
		lineWrapping: true,
		//foldGutter: true,
		//tabSize: 2,
		//indentUnit: 2,
		//indentWithTabs: true,
		//gutters: ['CodeMirror-linenumbers','CodeMirror-foldgutter'],
		//extraKeys: {'Ctrl-Q': function(cm) { cm.foldCode(cm.getCursor()); }},
		mode: 'javascript'
	};
	
	var cm = CodeMirror.fromTextArea(textarea, options);
	
	//cm.on('change', function() {
	//	
	//});
	//
	//cm.on('focus', function() {
	//	
	//});
	//
	//cm.on('blur', function() {
	//	//doc.setGutterMarker(line: integer|LineHandle, gutterID: string, value: Element)
	//	diagram.receiveText(cm.getValue(), cm.getCursor().line);
	//});
	
	cm.getDoc().setValue(code);
	
	return cm;
}

var canvasActive = true;
function SwitchTabs() {
	
	if (canvasActive)
	{
		document.getElementById('codemirror').style.display = 'block';
		document.getElementById('treeContainer').style.display = 'none';
		codemirror.refresh();
		codemirror.focus();
		canvasActive = false;
	}
	else
	{
		document.getElementById('codemirror').style.display = 'none';
		document.getElementById('treeContainer').style.display = 'block';
		document.getElementById('tree').focus();
		canvasActive = true;
	}
}

var ctx = document.getElementById('tree').getContext('2d');
ctx.canvas.focus();

var codemirror = InitCodemirror(document.getElementById('codemirror'), '');

document.getElementById('tree').addEventListener('keydown', function(e) { if (e.keyCode == 27) { SwitchTabs(); } });
document.getElementById('codemirror').addEventListener('keydown', function(e) { if (e.keyCode == 27) { SwitchTabs(); } });

var data = {a:'foo',b:[{a:'foo'},'baz'],c:['bar','baz']};

var options = {
	top: 20,
	left: 50,
	indent: 20,
	handleRadius: 5,
	textMargin: 15,
	twigHeight: 15,
	maxVisible: 30,
	font: '10pt Courier New',
	drawHandle: null
};

var tree = new Sweetgum.Tree(ctx, data, options);

</script>
</body>
</html>

