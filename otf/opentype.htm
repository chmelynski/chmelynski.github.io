
<html>
<body>

<script src="../assets.js"></script>

<script>var Hyperdeck = { Fonts: {} };</script>
<script src="SourceSerifPro-Regular.js"></script>
<script src="opentype-0.6.9.js"></script>

<input type="file" multiple onchange="LoadAssets(this.files, Onload)"><br>

<script>

function Base64StringToUint8Array(str) {
	
	function b64ToUint6(n) { return n>64&&n<91?n-65:n>96&&n<123?n-71:n>47&&n<58?n+4:n===43?62:n===47?63:0;}
	
	var nBlocksSize = 3;
	var sB64Enc = str.replace(/[^A-Za-z0-9\+\/]/g, ""); // remove all non-eligible characters from the string
	var nInLen = sB64Enc.length;
	var nOutLen = nBlocksSize ? Math.ceil((nInLen * 3 + 1 >> 2) / nBlocksSize) * nBlocksSize : nInLen * 3 + 1 >> 2;
	var taBytes = new Uint8Array(nOutLen);
	
	for (var nMod3, nMod4, nUint24 = 0, nOutIdx = 0, nInIdx = 0; nInIdx < nInLen; nInIdx++)
	{
		nMod4 = nInIdx & 3;
		nUint24 |= b64ToUint6(sB64Enc.charCodeAt(nInIdx)) << 18 - 6 * nMod4;
		
		if (nMod4 === 3 || nInLen - nInIdx === 1)
		{
			for (nMod3 = 0; nMod3 < 3 && nOutIdx < nOutLen; nMod3++, nOutIdx++)
			{
				taBytes[nOutIdx] = nUint24 >>> (16 >>> nMod3 & 24) & 255;
			}
			
			nUint24 = 0;
		}
	}
	
	return taBytes;
}

var assets = null;

function Onload(assetmap) {
	
	assets = assetmap;
	
	assets.forEach(function(asset, filename) {
		
		var ext = filename.substr(filename.lastIndexOf('.'));
		
		if (ext == '.otf' || ext == '.ttf')
		{
			Draw(asset);
		}
	});
}

function Draw(font) {
	
	var x = 30;
	var y = 65;
	var dy = 60;
	var size = 48;
	
	var ctx = document.createElement('canvas').getContext('2d');
	ctx.canvas.width = 1300;
	ctx.canvas.height = 350;
	ctx.canvas.style.border = '1px solid gray';
	ctx.canvas.style.margin = '1em';
	document.body.appendChild(ctx.canvas);
	
	font.draw(ctx, 'A B C D E F G H I J K L M N O P Q R S T U V W X Y Z', x, y + dy * 0, size);
	font.draw(ctx, 'a b c d e f g h i j k l m n o p q r s t u v w x y z', x, y + dy * 1, size);
	font.draw(ctx, '1 2 3 4 5 6 7 8 9 0', x, y + dy * 2, size);
	font.draw(ctx, '! @ # $ % ^ & * ( )', x, y + dy * 3, size);
	font.draw(ctx, '` ~ - _ = + [ { ] } \\ | ; : \' " , < . > / ?', x, y + dy * 4, size);
}

function DrawFile(font) {
	
	var ctx = document.createElement('canvas').getContext('2d');
	ctx.canvas.width = 1000;
	ctx.canvas.height = 1000;
	ctx.canvas.style.border = '1px solid gray';
	ctx.canvas.style.margin = '1em';
	document.body.appendChild(ctx.canvas);
	
	var numbers = ['supported','unitsPerEm','ascender','descender','defaultWidthX','nominalWidthX','nGlyphs','numGlyphs','numberOfHMetrics','subrsBias','gsubrsBias','outlinesFormat'];
	
	var x = 200;
	var y = 50;
	var dy = 20;
	ctx.font = '12pt Courier New';
	for (var i = 0; i < numbers.length; i++)
	{
		ctx.textAlign = 'right';
		ctx.fillText(numbers[i], x - 5, y + dy * i);
		ctx.textAlign = 'left';
		ctx.fillText(font[numbers[i]], x + 5, y + dy * i);
	}
	
	
}

var initfont = opentype.parse(Base64StringToUint8Array(Hyperdeck.Fonts['SourceSerifPro-Regular']).buffer);
Draw(initfont);
DrawFile(initfont);

</script>
</body>
</html>

