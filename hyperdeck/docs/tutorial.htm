
<html>
<head>
</head>
<body>

<div id="components">

<h3>How to use Hyperdeck</h3>

<p>Hyperdeck is just HTML/CSS/Javascript - it's basically a way to make a front-end wepage, but with built-in facilities for hosting, sharing, organizing, and working with data.</p>

<h4>Components</h4>

<p>The things on the left side of the screen are components, the basic building block of a Hyperdeck workbook.  Each component contains a piece of code or data.  You add components by choosing a component type from the <code>Add Component</code> button.  Components can be reordered, renamed, maximized/minimized, and deleted using the controls at the top of a component.  Most textual components come with dropdown box to toggle the display - <code>codemirror</code> displays the text in an editable <a href="https://codemirror.net/">Codemirror</a> widget, <code>pre</code> displays the text in a <code>&lt;pre&gt;</code> element, and <code>stats</code> just displays the length of the text.  These controls allow you to manage the resources consumed by large components - <code>stats</code> is lighter than <code>pre</code> is lighter than <code>codemirror</code>.  Most components also come with <code>Upload</code> and <code>Download</code> buttons so you can upload your own files or download the data.</p>

<h4>Saving</h4>

<p>A workbook is saved to the server as a JSON file that holds the data contained in each component.  All data within the components will be saved.  But any parts of the output document that are, for instance, generated dynamically by code, are not saved.  You can click the <code>Tools-&gt;Export Workbook</code> button to export the document JSON.</p>

</div>

<div id="document">
<h4>Output</h4>
<p>Code in HTML, CSS, and markdown components get added to the output document on the right hand side of the screen.  The output of each component is displayed on the right-hand side in the same order the component appears in the left-hand side.  Using the handle on the far left of the component header, you can drag components around to reorder them.  Try it!</p>

<p>You can toggle your view between components-only, split screen, and document-only using the Components/Split/Document button toggle</p>
</div><div id="markdown"><h4>Markdown</h4>

<p>Content can also be written as markdown.  Markdown is a lightweight plaintext markup language that gets converted to HTML.  Open one of the <code>md</code> components over at left to see some examples of markdown syntax.</p></div><div id="css-usage"><h4>CSS</h4>

<p>The output of <code>html</code> and <code>md</code> components is put into a <code>&lt;div&gt;</code> that gets id-tagged with the component's name.  This text is in a <code>&lt;div id="css-usage"&gt;</code> tag, and is styled  by the css code in the <code>css1</code> component (currently empty, but you can add style rules and see them take effect).</p></div><style id="css1">#css-usage { /* color : red */ }</style><div id="js-usage"><h4>Javascript</h4>

<p>The <code>js</code> component holds runnable javascript code.  For security reasons, workbooks are hosted in iframed sandbox served from a separate subdomain with zero server privileges - the javascript is essentially self-contained.  All the same, if you view a public workbook that belongs to someone else, you are still running untrusted code, and should treat it with the same care that you would any other random webpage.</p>

<p>By default, javascript code is not executed unless you click the <code>Run</code> button.  Click the <code>Run</code> button in the <code>js</code> component named <code>turn-green</code>, to turn this text green.</p>

<p>You can run <code>js</code> components programmatically by calling <code>Hyperdeck.Run(name)</code>.  So, calling <code>Hyperdeck.Run('turn-green')</code> will run the code in the <code>turn-green</code> component.</p></div><div id="turn-green"></div><div id="data"><h4>Data</h4>

<p>The <code>data</code> component holds plain javascript object data - anything that can be represented as JSON.  Check out the <code>data1</code> component at left.  Data can be displayed as JSON, YAML, CSV, TSV, or in a read-only <code>&lt;pre&gt;</code> tag.  The tabular formats, CSV and TSV, can only display data that can be sensibly interpreted as a table - generally a flat list of objects, such as <code>[{A:0,B:0},{A:0,B:0}]</code>.  Data can be accessed by calling <code>Hyperdeck.Get(name)</code>, which returns the javascript object stored within.  If you want to return a text representation of the data, you can add an options argument to specify the format, like <code>Hyperdeck.Get('data1', {format:'yaml'})</code>.  Similarly, you can set data by calling <code>Hyperdeck.Set(name, data, options)</code>.  Again, the <code>data</code> argument is assumed to be a javascript object by default, or text if the format is specified in the options.</p></div><div id="api"><h4>API Summary</h4>

<pre><code>Hyperdeck.Get(name, options) =&gt; data or text
Hyperdeck.Set(name, dataOrText, options)
Hyperdeck.Run(name)

options = {format:'json'|'yaml'|'csv'|'tsv'}</code></pre>

</body>
</html>

