<html>
<body>

<div style="width: 50em; margin: 0 auto; font-family: Georgia; text-align: justify;">

<h1 align="center">The Hyperdeck User's Guide</h1>

<ol>
 <li><a href="#use">How to use Hyperdeck</a>
  <ol>
   <li><a href="#cells-overview">Cells</a></li>
   <li><a href="#document">Document</a></li>
   <li><a href="#saving">Saving</a></li>
   <li><a href="#interaction">Cell interaction</a></li>
  </ol>
 </li>
 <li><a href="#api">API</a>
  <ol>
   <li><a href="#api-get">Get</a></li>
   <li><a href="#api-set">Set</a></li>
   <li><a href="#api-run">Run</a></li>
  </ol>
 </li>
 <li><a href="#cells">Cell types</a>
  <ol>
   <li><a href="#the-javascript-cell">Javascript</a></li>
   <li><a href="#the-data-cell">Data</a></li>
   <li><a href="#the-html-cell">HTML</a></li>
   <li><a href="#the-markdown-cell">Markdown</a></li>
   <li><a href="#the-css-cell">CSS</a></li>
   <li><a href="#the-text-cell">Plain text</a></li>
   <li><a href="#the-libraries-cell">Libraries</a></li>
   <li><a href="#the-assets-cell">Assets</a></li>
   <li><a href="#the-repl-cell">REPL</a></li>
   <li><a href="#the-snippets-cell">Snippets</a></li>
   <!--
   <li><a href="#the-diagram-cell">Diagram</a></li>
   <li><a href="#the-map-cell">Map</a></li>
   <li><a href="#the-graphics-cell">Graphics</a></li>
   -->
  </ol>
 </li>
 <li><a href="#examples">Examples</a></li>
</ol>

<!--

<p>If I had to do describe it in an X-for-Y way, the most technically accurate would be JSFiddle for LaTeX (although PDF support is not quite here yet).</p>
<p>Another way to describe it would be Excel/Word/Powerpoint but using web technologies. Different form, but same goals.</p>
<p>Of course, Google already has Google Docs - how is this different?  Google Docs is basically Microsoft Office ported to the web - the same interface, but built in HTML/CSS/JS instead.</p>
<p>Hyperdeck is what you get when you attempt to redesign the canonical office apps to take full advantage of the modern browser.</p>
<p>First of all, why are spreadsheets, word processors, and presentation editors different apps?  Mostly just path dependence - they started as different apps back in the 70s and 80s, and have stayed that way.</p>
<p>Certainly Microsoft has made valiant attempts at getting their office apps to play nicely with each other, but ultimately they're fighting against fundamental elements of the design.</p>
<p>Hyperdeck seeks to unify spreadsheets, word processors, and presentation editors into a single app, built on modern, open, extensible web technologies.</p>
<p>The same is true for scriptability. Visual Basic for Applications was not part of the original Excel - it was added on as a sort of separate module in 1990. It works!  The world still runs on Excel/VBA. But again, getting the two parts to play well together requires fighting the inherent separateness of the apps.</p>
<p>Hyperdeck integrates scriptability as a first-class citizen and can be extended by any code library that can run in the browser.</p>

-->
<br>
<hr>
<h3 id="use">How to use Hyperdeck</h3>
<p>Hyperdeck is a serverless notebook programming environment for doing light analysis and making documents - tasks that might otherwise be done with the standard office suite of spreadsheets and word processors.</p>
<p>From a mechanism standpoint, Hyperdeck is a lot like <a href="https://beta.observablehq.com/">Observable</a> or <a href="http://jupyter.org/">Jupyter</a>. Code and data are stored in cells, calculations can be reactive and immediate. But there are some differences - the first thing to note is that Hyperdeck is serverless. More precisely, it's just a static web page - after the app is loaded, there is no further communication with the server. All calculations are done in-browser, and input/output is done between the local filesystem or local storage (with the exception that code or data assets may be loaded dynamically from any URL, of course). Second, Hyperdeck has an output document that parallels the code/data cells, receiving their output. Third, Hyperdeck has several different types of cells - cells are specialized in ways that augment and complement the basic facilities of web programming.</p>
<p>Hyperdeck is quite flexible and can be used in many ways, but these enhancements to the basic notebook form support the functional goals of Hyperdeck - analysis and documents.</p>
<p>Try it <a href="https://chmelynski.github.io/hyperdeck/hyperdeck.htm">here</a>!</p>

<h4 id="cells-overview">Cells</h4>
<p>Cells are the basic building blocks of a Hyperdeck workbook. Each cell stores a piece of code or data and typically has facilities to display and edit the contents. There are several types of cell, as different kinds of code/data demand different kinds of display and controls. A workbook is a sequence of cells, but the order of cells is not significant except for display.</p>
<p>You should think of Hyperdeck cells as static by default - this is in contrast to other notebooks where the cells are more like a REPL, with output cells that automatically respond to changes in input cells. There is no built-in distinction between input/output cells in Hyperdeck. You can wire up cells so that one responds to changes in another, but this must be done explicitly. Again, order is not relevant. Cells that come earlier in the display sequence can be wired to react to cells that come later.</p>
<p>Cells are displayed on the left side of the workbook. You add cells by choosing a cell type from the <code>Add Cell</code> dropdown. Cells can be reordered, renamed, maximized/minimized, and deleted using the controls at the top of a cell. Most cells also come with <code>Upload</code> and <code>Download</code> buttons so you can upload your own files or download the data.</p>

<h4 id="document">Document</h4>
<p>The right side of the workbook displays the output document. The document contains one <code>&lt;div&gt;</code> for each cell. The content of cells that have an output, such as HTML, CSS, markdown, diagrams, etc., gets added to the corresponding <code>&lt;div&gt;</code> in the document. Using the handle on the far left of the cell header, you can drag cells around to reorder them. This will also rearrange the <code>&lt;div&gt;s</code> in the document.</p>
<p>You can toggle your view between cells-only, split screen, and document-only using the <code>Cells/Split/Document</code> button toggle</p>

<h4 id="saving">Saving</h4>
<p>A workbook is saved as a JSON file containing the contents of each cell, plus some metadata. It can be instructive to examine the workbook file to see what kind of data and metadata underlies each cell type. All data within the cells will be saved, but the output document on the right hand side is volatile. Any content in the output document that is dynamically generated (any content that is not a one-to-one correspondence with the contents of a cell) will not be saved with the workbook. The document can be exported using the <code>Tools->Export document as HTML</code>.</p>
<p>The <code>Export</code> and <code>Import</code> buttons save/load files to/from your filesystem.</p>
<p>The <code>Save</code> and <code>Load</code> buttons save/load files to/from local storage. Local storage is a good temporary place to save works in progress, if you find yourself constantly saving/loading a given workbook file from the filesystem. Note that, since you are probably loading all Hyperdeck workbooks from the same URL, saving to local storage will overwrite any existing saved workbook.</p>

<h4 id="interaction">Cell interaction</h4>
<p>There are two main mechanisms for interaction between cells, both of which have to be invoked explicitly. The first is the API function <code>Hyperdeck.Run(cellName)</code>, which runs the code within a javascript cell. This function can be called from anywhere, including other javascript cells. This is the proactive way to invoke code. The reactive way is via onchange hooks on Data cells. The Data cell has an input that can contain a code snippet that is executed whenever the contents of the cell change. Frequently the code snippet is just a call to <code>Hyperdeck.Run(cellName)</code>. Lastly, it should be noted that cell contents can be set using <code>Hyperdeck.Set(cellName, objectOrText)</code>, which can then trigger a Data cell's onchange snippet.</p>

<br>
<hr>
<h3 id="api">API</h3>
<p>Interactivity between cells is programmed using a simple, 3-function API:</p>
<pre>
Hyperdeck.Get(cellName, options)
Hyperdeck.Set(cellName, objectOrText, options)
Hyperdeck.Run(cellName)

options = {format:'json'|'yaml'|'csv'|'tsv'}
</pre>
<p>All cells are referred to by name (the editable input element in the cell header).</p>
<h4 id="api-get">Get</h4>
<p><code>Hyperdeck.Get(name, options)</code> returns the contents of the named cell as an object or text.</p>
<p>The options argument is relevant primarily for when Get is called on a data cell, where either an object or a string could plausibly be returned. The options argument is an object that currently supports one field, <code>format</code>. If the format option is omitted, Get returns the javascript object. If the format option is set, Get returns a string with the data in the specified format.</p>
<p>So if cell <code>data1</code> contains the following CSV data:</p>
<pre>
A,B,C
1,2,3
4,5,6
</pre>
<p>then <code>Hyperdeck.Get('data1')</code> returns the javascript object <code>[{A:1,B:2,C:3},{A:4,B:5,C:6}]</code>.</p>

<h4 id="api-set">Set</h4>
<p><code>Hyperdeck.Set(name, objectOrText, options)</code> sets cell data.</p>
<p><code>Hyperdeck.Set('data1', [{A:1,B:2,C:3},{A:4,B:5,C:6}])</code></p>
<p><code>Hyperdeck.Set('data1', 'A,B,C\n1,2,3\n4,5,6', {format: 'csv'})</code></p>
<p><code>Hyperdeck.Set('html1', 'Hello world!')</code></p>
<h4 id="api-run">Run</h4>
<p><code>Hyperdeck.Run(name)</code> runs the code in a <code>js</code> cell.</p>
<p><code>Hyperdeck.Run('js1')</code></p>

<br>
<hr>
<h3 id="cells">Cell types</h3>

<h4 id="the-javascript-cell">Javascript</h4>
<p>A javascript cell holds runnable javascript code.</p>
<p>The primary way to execute code is by clicking the <code>Run</code> button (the green arrow). This packages the code into a <code>function() { your-code-here }</code> and calls that function.</p>
<p>Alternatively, you can run javascript cells programmatically by calling <code>Hyperdeck.Run(cellName)</code>.</p>
<p>If the <code>runOnBlur</code> option is enabled, the code is run whenever focus leaves the editor - that is, the code runs immediately when you are done editing it. This is helpful if you want to avoid clicking the <code>Run</code> button after every edit.</p>
<p>If the <code>runOnLoad</code> option is enabled, the code is run when the workbook initially loads. Specifically, the code is run after all components have been loaded - this is important because it means that all <code>&lt;div&gt;</code> elements in the output section will be in place when the code runs. This is so the code can, for instance, dynamically generate content and then load it into an empty output <code>&lt;div&gt;</code>. If there are multiple javascript cells with <code>runOnLoad</code> enabled, they are run sequentially in the order they appear, top to bottom.</p>
<p>The <code>display</code> option can be used to lessen the resource footprint of the cell, if editing or display is unnecessary:</p>
<ul>
<li><code>codemirror</code> - by default, the code is displayed in an editable <a href="https://codemirror.net/">Codemirror</a> widget</li>
<li><code>readonly</code> - the code is displayed in a read-only <code>&lt;pre&gt;</code> tag</li>
<li><code>summary</code> - the code is not displayed at all - rather, statistics regarding size, etc. are displayed</li>
</ul>
<p>Finally, there are buttons to <code>Upload</code> and <code>Download</code> code files.</p>
<p>If the code in a javascript cell returns an HTMLElement, it is added to the output div corresponding to that cell. The output div is cleared first - the outputted element overwrites the existing content. This feature can be used to dynamically generate output, or add a canvas diagram, etc.</p>

<h4 id="the-data-cell">Data</h4>
<p>The <code>data</code> cell holds plain javascript object data - anything that can be represented as JSON.</p>
<p>Data can be displayed as JSON, YAML, CSV, TSV, or in a read-only <code>&lt;pre&gt;</code> tag.</p>
<p>The tabular formats, CSV and TSV, can only display data that can be sensibly interpreted as a table - generally a flat list of objects, such as <code>[{A:0,B:0},{A:0,B:0}]</code>.</p>
<p>Data can be accessed by calling <code>Hyperdeck.Get(name)</code>, which returns the javascript object stored within. If you want to return a text representation of the data, you can add an options argument to specify the format, like <code>Hyperdeck.Get('data1', {format:'yaml'})</code>.</p>
<p>Similarly, you can set data by calling <code>Hyperdeck.Set(name, data, options)</code>. Again, the <code>data</code> argument is assumed to be a javascript object by default, or text if the format is specified in the options.</p>
<p>There is an <code>onchange</code> input that can contain a snippet of code that is called whenever the cell data is modified. Typically the snippet will call code in a separate javascript cell, such as <code>Hyperdeck.Run('js1')</code>, but it doesn't have to - the snippet can be arbitrary code.</p>

<h4 id="the-html-cell">HTML</h4>
<p>The contents of an HTML cell get added to its corresponding output div.</p>

<h4 id="the-markdown-cell">Markdown</h4>
<p>A markdown cell functions the same as an HTML cell, except the content is interpreted as markdown. Markdown is a lightweight plaintext markup language that gets converted to HTML.</p>

<h4 id="the-css-cell">CSS</h4>
<p>The CSS cell contains css code that is packaged into a <code>&lt;style&gt;</code> tag and added to the output div. Every cell's output div is id-tagged with the cell's name - this is how you can target styles to the output of specific cells. For example, an HTML cell named <code>html1</code> will have an output div like so: <code>&lt;div id="html1"&gt;</code></p>

<h4 id="the-text-cell">Plain text</h4>
<p>A text cell does nothing special with its contents - it's just a storage container for plain text. Text can be edited and viewed as with other cells.</p>

<h4 id="the-libraries-cell">Libraries</h4>
<p>The libraries cell contains links to javascript libraries that are dynamically loaded into the page. The specified load order is enforced, so that libraries that depend on other libraries will work properly if they appear after the dependency in the list.</p>

<h4 id="the-assets-cell">Assets</h4>
<p>The assets cell contains links to assets that are dynamically loaded into a Map. The dropdown box next to the link must be set to an asset type, so that Hyperdeck knows how to interpret the loaded asset. Loaded assets are stored in a Map, keyed by their URL. <code>Hyperdeck.Get(assetCellName)</code> returns that Map - so that <code>Hyperdeck.Get('assets1').get('http://localhost:1234/foo.jpg')</code> is a typical way to access a dynamically loaded asset.</p>
<p>The asset cell can be used to load "heavy" assets from a local server. Be sure to set the <code>Access-Control-Allow-Origin</code> HTTP header on your asset server to the origin of the Hyperdeck page (e.g., <code>https://chmelynski.github.io</code>).</p>
<p><code>Hyperdeck.Set('assets1', [{url:'/img/foo.png',type:'image'}])</code></p>

<h4 id="the-repl-cell">REPL</h4>
<p>The REPL cell is basically a replication of the javascript console, so you can have a console while staying on the page. Entered expressions will be evaluated and the result or error will be displayed under the input.</p>

<h4 id="the-snippets-cell">Snippets</h4>
<p>The snippets cell is a lot like the REPL cell, except the expressions are persistent. This can be used to create a sort of jury-rigged control panel - a tool belt of small code snippets.</p>

<!--

<h4 id="the-diagram-cell">Diagram</h4>
<p></p>

<h4 id="the-map-cell">Map</h4>
<p></p>

<h4 id="the-graphics-cell">Graphics</h4>
<p></p>

<h4 id="the-image-cell">Image</h4>
<p>The <code>image</code> cell stores an image, providing a url that can be used in an <code>&lt;img&gt;</code> tag, the dimensions, and a preview. <code>Hyperdeck.Get('image1')</code> returns a <code>HTMLImageElement</code>.</p>

<h4 id="the-binary-cell">Binary</h4>
<p>The <code>binary</code> cell can store any binary blob, displaying the length in bytes. <code>Hyperdeck.Get('binary1')</code> returns a <code>Uint8Array</code>.</p>
-->
 
<h3 id="examples">Examples</h3>
<p><a href="https://chmelynski.github.io/hyperdeck/hyperdeck.htm?workbook=api">Get/Set/Run, onchange hooks</a></p>
<p><a href="https://chmelynski.github.io/hyperdeck/hyperdeck.htm?workbook=html-document">HTML document output</a></p>
<p><a href="https://chmelynski.github.io/hyperdeck/hyperdeck.htm?workbook=assets-and-libraries">Assets and libraries</a></p>
<p><a href="https://chmelynski.github.io/hyperdeck/hyperdeck.htm?workbook=bar-chart">Bar chart</a></p>
<p><a href="https://chmelynski.github.io/hyperdeck/hyperdeck.htm?workbook=line-chart">Line chart</a></p>
 
<!--
<p><a href="https://chmelynski.github.io/hyperdeck/hyperdeck.htm?workbook="></a></p>
<p><a href="https://chmelynski.github.io/hyperdeck/hyperdeck.htm?workbook=diagram">Diagram</a></p>
<p><a href="https://chmelynski.github.io/hyperdeck/hyperdeck.htm?workbook=fonts">Fonts</a></p>
<p><a href="https://chmelynski.github.io/hyperdeck/hyperdeck.htm?workbook=graphics">Graphics</a></p>
<p><a href="https://chmelynski.github.io/hyperdeck/hyperdeck.htm?workbook=scrubber">Scrubber</a></p>
-->
 
</div>

</body>
</html>
