
<html>
<head>
<style>
#container { display: grid; grid-template-columns: 1fr 1fr; }
</style>
<script>var exports = {};</script>
<script src="diagram.js"></script>
<!-- <script src="diagram-helpers.js"></script> -->
</head>
<body>

<label>Show points: </label><input id="showpoints" type="checkbox" checked></input>
<input type="file" multiple onchange="LoadAssets(this.files, OnLoad)">
<!-- <button onclick="SwitchTabs()">Switch Tabs</button> -->

<input id="width" type="text" value="1300" size="5">
<input id="height" type="text" value="500" size="5">

<button onclick="Download(diagram.exportPath())">Export Path</button>

<div id="codemirror" tabIndex="1" style="margin: 1em; display: none;">
    <textarea id="code" style="width: 1300px; height: 500px;"></textarea>
</div>
<div id="diagramContainer" style="margin: 1em;">
    <canvas id="diagram" tabIndex="2" style="border: 1px solid gray;"></canvas>
</div>

<script>

const initialCode = `
ctx.canvas.width = document.getElementById('width').value;
ctx.canvas.height = document.getElementById('height').value;

ctx.fillStyle = 'white';
ctx.fillRect(0, 0, ctx.canvas.width, ctx.canvas.height);

const a = { x: 100, y: 100 }, b = { x: 200, y: 200 };
ctx.strokeRect(a.x + 0.5, a.y + 0.5, 50, 50);
ctx.strokeRect(b.x + 0.5, b.y + 0.5, 50, 50);
`;

let assets = null;
function OnLoad(assetmap) { assets = assetmap; }

function LoadAssets(files, callback) {
	
	var toload = files.length;
	var loaded = 0;
	
	var assets = new Map();
	
	for (var i = 0; i < files.length; i++)
	{
		(function(thefile) {
		
			var filename = thefile.name;
			
			var fileReader = new FileReader();
			
			var ext = filename.substr(filename.lastIndexOf('.'));
			
			fileReader.onload = function(event) {
				
				var result = event.target.result;
				
				if (ext == '.jpg' || ext == '.jpeg' || ext == '.bmp' || ext == '.png' || ext == '.gif')
				{
					var img = document.createElement('img')
					img.src = result; // 'data:image/' + ext.substr(1) + ';base64,' + 
					assets.set(filename, img);
				}
				else if (ext == '.otf' || ext == '.ttf')
				{
					var font = opentype.parse(result);
					assets.set(filename, font);
				}
				else if (ext == '.osm')
				{
					var xml = Xml.Parse(result);
					var osm = Osm.MakeOsm(xml);
					// need smarter bounds - tag osm.bounds with like 5% and 95% point extent, plus a buffer?
					//osm.bounds.pseudomaxLat = ??
					assets.set(filename, osm);
				}
				else if (ext == '.topopack' || ext == '.geopack' || ext == '.arcpack')
				{
					assets.set(filename, result);
				}
				else if (ext == '.tsv' || ext == '.csv')
				{
					
				}
				else if (ext == '.json' || ext == '.topojson' || ext == '.geojson')
				{
					assets.set(filename, JSON.parse(result));
				}
				else if (ext == '.txt' || ext == '.js' || ext == '.path')
				{
					assets.set(filename, result);
				}
				else
				{
					throw new Error();
				}
				
				loaded++;
				if (toload == loaded) { callback(assets); }
			};
			
			if (ext == '.jpg' || ext == '.jpeg' || ext == '.bmp' || ext == '.png' || ext == '.gif')
			{
				fileReader.readAsDataURL(thefile);
			}
			else if (ext == '.txt' || ext == '.js' || ext == '.json' || ext == '.tsv' || ext == '.csv' || ext == '.path' || ext == '.osm' || ext == '.topojson' || ext == '.geojson')
			{
				fileReader.readAsText(thefile);
			}
			else
			{
				fileReader.readAsArrayBuffer(thefile);
			}
			
		})(files[i]);
	}
}

function Download(path) {
	
	var blob = new Blob([path], {type:'text/plain'});
	var fileReader = new FileReader();
	
	fileReader.onload = function(event) {
		var a = document.createElement('a');
		a.href = event.target.result;
		a.download = 'filename.path';
		document.body.appendChild(a);
		a.click();
		document.body.removeChild(a);
	};
	
	fileReader.readAsDataURL(blob);
}

document.getElementById('showpoints').onchange = function() {
	diagram.showPoints = this.checked;
	diagram.draw();
};

document.getElementById('code').onblur = function() { diagram.receiveText(this.value); };
function SetCodemirrorText(code) { document.getElementById('code').value = code; }
const ctx = document.getElementById('diagram').getContext('2d');
const diagram = new Hyperdeck.Diagram(ctx, SetCodemirrorText);
diagram.receiveText(initialCode);
document.getElementById('code').value = initialCode;

let canvasActive = true;
function SwitchTabs() {
	
	if (canvasActive)
	{
		document.getElementById('codemirror').style.display = 'block';
		document.getElementById('diagramContainer').style.display = 'none';
		document.getElementById('code').focus();
		canvasActive = false;
	}
	else
	{
		document.getElementById('codemirror').style.display = 'none';
		document.getElementById('diagramContainer').style.display = 'block';
		document.getElementById('diagram').focus();
		canvasActive = true;
	}
}

document.getElementById('diagram').focus();
document.getElementById('diagram').addEventListener('keydown', function(e) { if (e.keyCode == 27) { SwitchTabs(); } });
document.getElementById('codemirror').addEventListener('keydown', function(e) { if (e.keyCode == 27) { SwitchTabs(); } });

</script>
</body>
</html>

