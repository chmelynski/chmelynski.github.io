
<html>
<head>
<script>var exports = {}; var Hyperdeck = { Fonts: {} };</script>
<script src="../otf/opentype-0.6.9.js"></script>
<script src="../otf/SourceSerifPro-Regular.js"></script>
<script src="pdf.js"></script>
<script src="../assets.js"></script>
</head>
<body>

<input type="file" multiple onchange="LoadAssets(this.files, Onload)" style="margin-bottom:1em">
<button onclick="Generate()">Generate</button>
<br>

<!-- <textarea id="input" style="width:40em; height:40em;">

0 0 0 rg
0 0 0 RG

10 10 m
100 100 l
S

</textarea> -->

<textarea id="input" style="width:40em; height:40em;">

ctx.font = '10pt serif';
ctx.fillText('Hello world', 100, 100);

</textarea>

<!--

// to draw an image: save matrix, set the transform, draw the image, restore the old matrix
q
100 0 0 100 200 300 cm // dw 0 0 dh dx (dy+dh) cm
/Im1 Do
Q

BT

/F1 36 Tf
1 0 0 1 200 700 Tm
(abc) Tj

/F2 36 Tf
1 0 0 1 200 600 Tm
(abc) Tj

/F3 36 Tf
1 0 0 1 200 500 Tm
(abc) Tj

ET

-->

<pre id="output" style="position:absolute; left:600px; top:50px;"></pre>

<script>

var assets = null;

//Hyperdeck.Fonts['serif'] = opentype.parse(Base64StringToUint8Array(Hyperdeck.Fonts['SourceSerifPro-Regular']).buffer);
Hyperdeck.Fonts['serif'] = Hyperdeck.Fonts['SourceSerifPro-Regular'];

var uploads = {};
var fonts = {};

function Onload(assetmap) {
	
	for (var id in assetmap)
	{
		var ext = id.substr(id.lastIndexOf('.'));
		var asset = assetmap[id];
		
		if (ext == 'otf')
		{
			assets[id] = opentype.parse(asset);
		}
		else if (ext == 'jpg')
		{
			
		}
		else
		{
			throw new Error('unknown ext: ' + id);
		}
	}
}

function Generate() {
	
	var width = 8.5 * 72;
	var height = 11 * 72;
	
	var commands = document.getElementById('input').value.split('\n').map(function(elt, index) { return elt.trim(); });
	
	var pdf = new PDF(width, height);
	pdf.commands = commands;
	PDF.fontNameToIndex = { "Times-Roman" : 1 , "Helvetica" : 2 }
	PDF.fontNameToUint8Array = {};
	pdf.imageDict = {};
	
	if (uploads['image1']) { pdf.imageDict['Im1'] = ConvertImageToPdf(uploads['image1']); }
	if (uploads['image2']) { pdf.imageDict['Im2'] = ConvertImageToPdf(uploads['image2']); }
	
	if (uploads['font1'])
	{
		// make font object, font data object
		PDF.fontNameToIndex['Font3'] = 3;
		PDF.fontNameToUint8Array['Font3'] = uploads['font1'];
	}
	
	if (uploads['font2'])
	{
		// make font object, font data object
		PDF.fontNameToIndex['Font4'] = 4;
		PDF.fontNameToUint8Array['Font4'] = uploads['font2'];
	}
	
	document.getElementById('output').innerHTML = PDF.Export([pdf]);
}
function ConvertImageToPdf(uint8Array) {
	
	// we generate an imageXObject and put it in a dictionary that maps ids to imageXObjects { 'Im1' : imageXObject , 'Im2' : imageXObject }
	// the image data is encoded as hex string ( RR GG BB RR GG BB ), EX: '4EF023'
	// this means that one byte of color data is transformed into a two-character string
	// this ascii hex string is attached stored at imageXObject['[stream]']
	
	// { /Type /XObject /Subtype /Image /ColorSpace /DeviceRGB /BitsPerComponent 8 /Width 100 /Height 100 /Length 60000 /Filter /AaciiHexDecode }
	var imageXObject = {};
	imageXObject.Type = 'XObject';
	imageXObject.Subtype = 'Image';
	imageXObject.ColorSpace = 'DeviceRGB';
	imageXObject.BitsPerComponent = 8;
	
	var img = Uint8ArrayPngToImg(uint8Array);
	var imagestream = ImgToAsciiHexDecode(img) + '>\r\n';
	
	imageXObject['[stream]'] = imagestream;
	
	imageXObject.Width = img.width;
	imageXObject.Height = img.height;
	imageXObject.Length = imagestream.length;
	imageXObject.Filter = 'ASCIIHexDecode';
	
	return imageXObject;
}

function MakeFontObjects() {

// generic entries required in a stream dictionary - section 3.2.7, p. 60
// Length	integer	(Required) The number of bytes from the beginning of the line following the keyword stream to the last byte just before the keyword endstream. (There may be an additional EOL marker, preceding endstream, that is not included in the count and is not logically part of the stream data.) See “Stream Extent,” above, for further discussion.
// Filter	name or array	(Optional) The name of a filter to be applied in processing the stream data found between the keywords stream and endstream, or an array of such names. Multiple filters should be specified in the order in which they are to be applied.
// F	file specification	(Optional; PDF 1.2) The file containing the stream data. If this entry is present, the bytes between stream and endstream are ignored, the filters are specified by FFilter rather than Filter, and the filter parameters are specified by FDecodeParms rather than DecodeParms. However, the Length entry should still specify the number of those bytes. (Usually, there are no bytes and Length is 0.) (See implementation note 46 in Appendix H.)

// filters - section 3.3, p. 65
// ASCIIHexDecode

// Table 5.23 (below) summarizes the ways in which font programs are embedded in a PDF file, depending on the representation of the font program.
// The key is the name used in the font descriptor to refer to the font file stream;
// the subtype is the value of the Subtype key, if present, in the font file stream dictionary.
// FontFile		Type 1 font program, in the original (noncompact) format described in Adobe Type 1 Font Format. This entry can appear in the font descriptor for a Type1 or MMType1 font dictionary.
// FontFile2	(PDF 1.1) TrueType font program, as described in the TrueType Reference Manual. This entry can appear in the font descriptor for a TrueType font dictionary or (in PDF 1.3) for a CIDFontType2 CIDFont dictionary.
// FontFile3
//   Type1C	(PDF 1.2) Type 1–equivalent font program represented in the Compact Font Format (CFF), as described in Adobe Technical Note #5176, The Compact Font Format Specification. This entry can appear in the font descriptor for a Type1 or MMType1 font dictionary.
//   CIDFontType0C	(PDF 1.3) Type 0 CIDFont program represented in the Compact Font Format (CFF), as described in Adobe Technical Note #5176, The Compact Font Format Specification. This entry can appear in the font descriptor for a CIDFontType0 CIDFont dictionary.
//   OpenType	(PDF 1.6) OpenType font program, as described in the OpenType Font Specification (see the Bibliography). OpenType is an extension of TrueType that allows inclusion of font programs that use the Compact Font Format (CFF).
//     This entry can appear in the font descriptor for the following types of font dictionaries:
//       A TrueType font dictionary or a CIDFontType2 CIDFont dictionary, if the embedded font program contains a “glyf” table.
//       A CIDFontType0 CIDFont dictionary, if the embedded font program contains a “CFF” table with a Top DICT that uses CIDFont operators (this is equivalent to subtype CIDFontType0C above).
//       A Type1 font dictionary or CIDFontType0 CIDFont dictionary, if the embedded font program contains a “CFF” table without CIDFont operators.

// The stream dictionary for a font file contains the normal entries for a stream, such as Length and Filter (listed in Table 3.4 on page 62),
// plus the additional entries listed in Table 5.24 (below):
// Length1	integer	(Required for Type 1 and TrueType fonts) The length in bytes of the clear-text portion of the Type 1 font program (see below), or the entire TrueType font program, after it has been decoded using the filters specified by the stream’s Filter entry, if any.
// Length2	integer	(Required for Type 1 fonts) The length in bytes of the encrypted portion of the Type 1 font program (see below) after it has been decoded using the filters specified by the stream’s Filter entry.
// Length3	integer	(Required for Type 1 fonts) The length in bytes of the fixed-content portion of the Type 1 font program (see below) after it has been decoded using the filters specified by the stream’s Filter entry. If Length3 is 0, it indicates that the 512 zeros and cleartomark have not been included in the FontFile font program and must be added.
// Subtype	name	(Required if referenced from FontFile3; PDF 1.2) A name specifying the format of the embedded font program. The name must be Type1C for Type 1 compact fonts, CIDFontType0C for Type 0 compact CIDFonts, or OpenType for OpenType fonts. When additional font formats are added to PDF, more values will be defined for Subtype.
// Metadata stream	(Optional; PDF 1.4) A metadata stream containing metadata for the embedded font program (see Section 10.2.2, “Metadata Streams”).

// A TrueType font program may be used as part of either a font or a CIDFont. Although the basic font file format is the same in both cases, there are different requirements for what information must be present in the font program. The following TrueType tables are always required: “head,” “hhea,” “loca,” “maxp,” “cvt ,” “prep,” “glyf,” “hmtx,” and “fpgm.” If used with a simple font dictionary, the font program must additionally contain a “cmap” table defining one or more encodings, as discussed in “Encodings for TrueType Fonts” on page 429. If used with a CIDFont dictionary, the “cmap” table is not needed, since the mapping from character codes to glyph descriptions is provided separately.

// Beginning with PDF 1.6, font programs may be embedded using the OpenType format, which is an extension of the TrueType format that allows inclusion of font programs using the Compact Font Format (CFF). It also allows inclusion of data to describe glyph substitutions, kerning, and baseline adjustments. In addition to rendering glyphs, applications can use the data in OpenType fonts to do advanced line layout, automatically substitute ligatures, provide selections of alternate glyphs to users, and handle complicated writing scripts.

// Like TrueType, OpenType font programs contain a number of tables, as defined in the OpenType Font Specification (see the Bibliography). For OpenType fonts based on TrueType, the “glyf” table contains the glyph descriptions. For OpenType fonts based on CFF, the “CFF” table is a complete font program containing the glyph descriptions. These tables, as well as the “cmap” table, are required to be present when embedding fonts. In addition, for OpenType fonts based on TrueType, the “head,” “hhea,” “loca,” “maxp,” “cvt ,” “prep,” “hmtx,” and “fpgm” tables are required.



}

function Uint8ArrayToBase64String(aBytes) {
	
	// img.src = 'data:image/png;base64,' + Uint8ArrayToBase64String(uint8Array);
	
	var nMod3 = '';
	var sB64Enc = '';
	
	var uint6ToB64 = function(n) { return n<26?n+65:n<52?n+71:n<62?n-4:n===62?43:n===63?47:65; }
	
	for (var nLen = aBytes.length, nUint24 = 0, nIdx = 0; nIdx < nLen; nIdx++)
	{
		nMod3 = nIdx % 3;
		//if (nIdx > 0 && (nIdx * 4 / 3) % 76 === 0) { sB64Enc += "\r\n"; }
		nUint24 |= aBytes[nIdx] << (16 >>> nMod3 & 24);
		
		if (nMod3 === 2 || aBytes.length - nIdx === 1)
		{
			var a = uint6ToB64(nUint24 >>> 18 & 63);
			var b = uint6ToB64(nUint24 >>> 12 & 63);
			var c = uint6ToB64(nUint24 >>> 06 & 63);
			var d = uint6ToB64(nUint24 >>> 00 & 63);
			sB64Enc += String.fromCharCode(a, b, c, d);
			nUint24 = 0;
		}
	}
	
	return sB64Enc.replace(/A(?=A$|$)/g, "=");
}
function Base64StringToUint8Array(str) {
	
	function b64ToUint6(n) { return n>64&&n<91?n-65:n>96&&n<123?n-71:n>47&&n<58?n+4:n===43?62:n===47?63:0; }

	var nBlocksSize = 3;
	var sB64Enc = str.replace(/[^A-Za-z0-9\+\/]/g, ""); // remove all non-eligible characters from the string
	var nInLen = sB64Enc.length;
	var nOutLen = nBlocksSize ? Math.ceil((nInLen * 3 + 1 >> 2) / nBlocksSize) * nBlocksSize : nInLen * 3 + 1 >> 2;
	var taBytes = new Uint8Array(nOutLen);
	
	for (var nMod3, nMod4, nUint24 = 0, nOutIdx = 0, nInIdx = 0; nInIdx < nInLen; nInIdx++)
	{
		nMod4 = nInIdx & 3;
		nUint24 |= b64ToUint6(sB64Enc.charCodeAt(nInIdx)) << 18 - 6 * nMod4;
		
		if (nMod4 === 3 || nInLen - nInIdx === 1)
		{
			for (nMod3 = 0; nMod3 < 3 && nOutIdx < nOutLen; nMod3++, nOutIdx++)
			{
				taBytes[nOutIdx] = nUint24 >>> (16 >>> nMod3 & 24) & 255;
			}
			
			nUint24 = 0;
		}
	}
	
	return taBytes;
}
function Uint8ArrayPngToImg(uint8Array) {
	var img = document.createElement('img');
	img.src = 'data:image/png;base64,' + Uint8ArrayToBase64String(uint8Array);
	return img;
}
function ImgToAsciiHexDecode(img) {
	
	var canvas = document.createElement('canvas');
	var ctx = canvas.getContext('2d');
	
	var wd = img.width;
	var hg = img.height;
	
	canvas.width = wd;
	canvas.height = hg;
	ctx.clearRect(0, 0, wd, hg);
	ctx.drawImage(img, 0, 0, wd, hg);
	
	var imageData = ctx.getImageData(0, 0, wd, hg);
	var pixelData = imageData.data;
	
	var imagestreamlines = [];
	
	for (var i = 0; i < imageData.height; i++)
	{
		for (var j = 0; j < imageData.width; j++)
		{
			var R = pixelData[(i * imageData.width + j) * 4 + 0];
			var G = pixelData[(i * imageData.width + j) * 4 + 1];
			var B = pixelData[(i * imageData.width + j) * 4 + 2];
			var A = pixelData[(i * imageData.width + j) * 4 + 3];
			
			var hex = '';
			hex += ((R < 0x10) ? '0' : '') + R.toString(16).toUpperCase()
			hex += ((G < 0x10) ? '0' : '') + G.toString(16).toUpperCase()
			hex += ((B < 0x10) ? '0' : '') + B.toString(16).toUpperCase()
			imagestreamlines.push(hex);
		}
	}
	
	return imagestreamlines.join('');
}

</script>
</body>
</html>

